[General]
network = Demo	# 绑定网络模型

description = ""

sim-time-limit = 500ms	# 设置仿真时间限制

*.numOfVN = 60	# 设置VN数量
**.num_of_planes = 6	# 设置轨道数量
**.sta_per_plane = 10	# 设置每个轨道上的VN数量

*.*.width = 2160	# 设置背景宽度
*.*.height = 1080	# 设置背景高度

*.*.eth[*].bitrate = 1Gbps	# 设置接口比特率

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"	# 可忽略

*.macForwardingTableConfigurator.typename = ""	# 可忽略

**.udp.defaultMulticastLoop = false # 禁用默认的多播循环

*.*.hasOutgoingStreams = true	# 开启出站流
*.*.hasIncomingStreams = true	# 开启入站流

*.vn[*].hasEgressTrafficShaping = true	# 开启VN功能流量整形

# 基于CQF的流量整形，开启3个队列，其中2个TT队列和1个BE队列的流量整形
*.vn[*].eth[*].macLayer.queue.numTrafficClasses = 2
*.vn[*].eth[*].macLayer.queue.*[0].display-name = "TT"
*.vn[*].eth[*].macLayer.queue.*[1].display-name = "TT"
*.vn[*].eth[*].macLayer.queue.*[2].display-name = "BE"

# TT流优先级高于BE流
# 2个TT队列同一时隙一个负责接收流量，一个负责发送流量，周期切换，以下参数设置周期时长
# BE流量不受限制，直接发送
*.vn[*].eth[*].macLayer.queue.typename = "Ieee8021qCyclicQueueingAndForwarding"
*.vn[*].eth[*].macLayer.queue.transmissionGate[0].durations = [50us, 50us]
*.vn[*].eth[*].macLayer.queue.transmissionGate[0].offset = 0us
*.vn[*].eth[*].macLayer.queue.transmissionGate[1].durations = [50us, 50us]
*.vn[*].eth[*].macLayer.queue.transmissionGate[1].offset = 50us
*.vn[*].eth[*].macLayer.queue.transmissionGate[2].alwaysOpen = true

# 用于虚拟节点mac表初始化，实际的数据包转发通过算法实现，不使用mac表转发
*.vn[*].macTable.forwardingTable = [
        {address: "gs[1]", interface: "eth0", vlan: 1}, 
        {address: "gs[3]", interface: "eth0", vlan: 1}, 
        {address: "gs[4]", interface: "eth0", vlan: 1}, 
        {address: "gs[5]", interface: "eth0", vlan: 1}, 
        {address: "gs[6]", interface: "eth0", vlan: 1}, 
        {address: "gs[7]", interface: "eth0", vlan: 1}, 
        {address: "gs[8]", interface: "eth0", vlan: 1}, 
        {address: "gs[9]", interface: "eth0", vlan: 1},
        {address: "gs[11]", interface: "eth0", vlan: 1},  
        {address: "gs[12]", interface: "eth0", vlan: 1}, 
    ]

# GS数量，为每个GS手动设置经纬度
*.numOfGS = 13 

*.gs[0].longitude = 116.20deg
*.gs[0].latitude = 39.55deg

*.gs[1].longitude = 25.45deg
*.gs[1].latitude = 40.25deg

*.gs[2].longitude = 51.30deg
*.gs[2].latitude = 35.44deg

*.gs[3].longitude = -60.00deg
*.gs[3].latitude = -36.30deg

*.gs[4].longitude = 149.08deg
*.gs[4].latitude = -35.15deg

*.gs[5].longitude = 55.45deg
*.gs[5].latitude = -4.62deg

*.gs[6].longitude = -41.85deg
*.gs[6].latitude = 64.09deg

*.gs[7].longitude = -6.56deg
*.gs[7].latitude = 62.05deg

*.gs[8].longitude = -77.02deg
*.gs[8].latitude = 39.91deg

*.gs[9].longitude = -75.42deg
*.gs[9].latitude = -45.27deg

*.gs[10].longitude = 1.14deg
*.gs[10].latitude = -30.01deg

*.gs[11].longitude = -99.10deg
*.gs[11].latitude = 19.20deg

*.gs[12].longitude = 16.42deg
*.gs[12].latitude = -64.41deg

# 基于UDP的流量生成，设置UDP发送端和和接收端
*.gs[0].app[0].typename = "UdpSourceApp"	# 设置UDP发送端
*.gs[0].app[0].display-name = "VLAN_0_Flow_1"	# 设置UDP发送端名称
*.gs[0].app[0].io.destAddress = "gs[1]"	# 设置UDP发送端目的地址
*.gs[0].app[0].io.destPort = 1004	# 设置UDP发送端目的端口
*.gs[0].app[0].source.packetNameFormat = "%M->gs[1]:TT:gId1-%c"	# 设置UDP发送端数据包名称格式
*.gs[0].app[0].source.packetLength = 1250B - 28B	# 设置UDP发送端数据包长度
*.gs[0].app[0].source.productionInterval = 20us	# 设置UDP发送端数据包生产间隔
*.gs[0].app[0].source.initialProductionOffset = 250ms	# 设置UDP发送端数据包初始生产偏移量
*.gs[1].app[0].typename = "UdpSinkApp"	# 设置UDP接收端
*.gs[1].app[0].io.localPort = 1004	# 设置UDP接收端本地端口

# 设置UDP发送端和接收端的流标识符和编码器映射关系
*.gs[0].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[1]:*" && udp.destPort == 1004), stream: "VLAN_0_Flow_1", sequenceNumbering: true}, 
	]
# 设置UDP发送端和接收端的流编码器映射关系，其中pcp为4代表TT流，其余代表BE流
*.gs[0].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_1", pcp: 4, vlan: 1}, 
	]

*.gs[2].app[0].typename = "UdpSourceApp"
*.gs[2].app[0].display-name = "VLAN_0_Flow_2"
*.gs[2].app[0].io.destAddress = "gs[3]"
*.gs[2].app[0].io.destPort = 1005
*.gs[2].app[0].source.packetNameFormat = "%M->gs[3]:TT:gId1-%c"
*.gs[2].app[0].source.packetLength = 1250B - 28B
*.gs[2].app[0].source.productionInterval = 15us
*.gs[2].app[0].source.initialProductionOffset = 250ms
*.gs[3].app[0].typename = "UdpSinkApp"
*.gs[3].app[0].io.localPort = 1005

*.gs[2].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[3]:*" && udp.destPort == 1005), stream: "VLAN_0_Flow_2", sequenceNumbering: true}, 
	]
*.gs[2].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_2", pcp: 4, vlan: 1}, 
	]

*.gs[4].app[0].typename = "UdpSourceApp"
*.gs[4].app[0].display-name = "VLAN_0_Flow_3"
*.gs[4].app[0].io.destAddress = "gs[6]"
*.gs[4].app[0].io.destPort = 1006
*.gs[4].app[0].source.packetNameFormat = "%M->gs[6]:TT:gId1-%c"
*.gs[4].app[0].source.packetLength = 1250B - 28B
*.gs[4].app[0].source.productionInterval = 15us
*.gs[4].app[0].source.initialProductionOffset = 250ms
*.gs[6].app[0].typename = "UdpSinkApp"
*.gs[6].app[0].io.localPort = 1006

*.gs[4].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[6]:*" && udp.destPort == 1006), stream: "VLAN_0_Flow_3", sequenceNumbering: true}, 
	]
*.gs[4].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_3", pcp: 4, vlan: 1}, 
	]

*.gs[5].app[0].typename = "UdpSourceApp"
*.gs[5].app[0].display-name = "VLAN_0_Flow_4"
*.gs[5].app[0].io.destAddress = "gs[4]"
*.gs[5].app[0].io.destPort = 1007
*.gs[5].app[0].source.packetNameFormat = "%M->gs[4]:TT:gId1-%c"
*.gs[5].app[0].source.packetLength = 1250B - 28B
*.gs[5].app[0].source.productionInterval = 15us
*.gs[5].app[0].source.initialProductionOffset = 250ms
*.gs[4].app[1].typename = "UdpSinkApp"
*.gs[4].app[1].io.localPort = 1007

*.gs[5].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[4]:*" && udp.destPort == 1007), stream: "VLAN_0_Flow_4", sequenceNumbering: true}, 
	]
*.gs[5].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_4", pcp: 4, vlan: 1}, 
	]

*.gs[9].app[0].typename = "UdpSourceApp"
*.gs[9].app[0].display-name = "VLAN_0_Flow_5"
*.gs[9].app[0].io.destAddress = "gs[7]"
*.gs[9].app[0].io.destPort = 1008
*.gs[9].app[0].source.packetNameFormat = "%M->gs[7]:BE:gId1-%c"
*.gs[9].app[0].source.packetLength = 1250B - 28B
*.gs[9].app[0].source.productionInterval = 15us
*.gs[9].app[0].source.initialProductionOffset = 250ms
*.gs[7].app[0].typename = "UdpSinkApp"
*.gs[7].app[0].io.localPort = 1008

*.gs[9].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[7]:*" && udp.destPort == 1008), stream: "VLAN_0_Flow_5", sequenceNumbering: true}, 
	]
*.gs[9].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_5", pcp: 1, vlan: 1}, 
	]

*.gs[10].app[0].typename = "UdpSourceApp"
*.gs[10].app[0].display-name = "VLAN_0_Flow_6"
*.gs[10].app[0].io.destAddress = "gs[8]"
*.gs[10].app[0].io.destPort = 1009
*.gs[10].app[0].source.packetNameFormat = "%M->gs[8]:BE:gId1-%c"
*.gs[10].app[0].source.packetLength = 1250B - 28B
*.gs[10].app[0].source.productionInterval = 15us
*.gs[10].app[0].source.initialProductionOffset = 250ms
*.gs[8].app[0].typename = "UdpSinkApp"
*.gs[8].app[0].io.localPort = 1009

*.gs[10].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[8]:*" && udp.destPort == 1009), stream: "VLAN_0_Flow_6", sequenceNumbering: true}, 
	]
*.gs[10].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_6", pcp: 1, vlan: 1}, 
	]

*.gs[6].app[1].typename = "UdpSourceApp"
*.gs[6].app[1].display-name = "VLAN_0_Flow_7"
*.gs[6].app[1].io.destAddress = "gs[3]"
*.gs[6].app[1].io.destPort = 1010
*.gs[6].app[1].source.packetNameFormat = "%M->gs[3]:BE:gId1-%c"
*.gs[6].app[1].source.packetLength = 1250B - 28B
*.gs[6].app[1].source.productionInterval = 15us
*.gs[6].app[1].source.initialProductionOffset = 250ms
*.gs[3].app[1].typename = "UdpSinkApp"
*.gs[3].app[1].io.localPort = 1010

*.gs[6].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[3]:*" && udp.destPort == 1010), stream: "VLAN_0_Flow_7", sequenceNumbering: true}, 
	]
*.gs[6].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_7", pcp: 1, vlan: 1}, 
	]

*.gs[12].app[0].typename = "UdpSourceApp"
*.gs[12].app[0].display-name = "VLAN_0_Flow_9"
*.gs[12].app[0].io.destAddress = "gs[11]"
*.gs[12].app[0].io.destPort = 1010
*.gs[12].app[0].source.packetNameFormat = "%M->gs[11]:BE:gId1-%c"
*.gs[12].app[0].source.packetLength = 1250B - 28B
*.gs[12].app[0].source.productionInterval = 15us
*.gs[12].app[0].source.initialProductionOffset = 250ms
*.gs[11].app[0].typename = "UdpSinkApp"
*.gs[11].app[0].io.localPort = 1010

*.gs[12].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[11]:*" && udp.destPort == 1010), stream: "VLAN_0_Flow_9", sequenceNumbering: true}, 
	]
*.gs[12].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_9", pcp: 1, vlan: 1}, 
	]

# 根据地面站应用设置相应的数量
*.gs[0].numApps = 1
*.gs[1].numApps = 1
*.gs[2].numApps = 1
*.gs[3].numApps = 2
*.gs[4].numApps = 2
*.gs[5].numApps = 1
*.gs[6].numApps = 2
*.gs[7].numApps = 1
*.gs[8].numApps = 1
*.gs[9].numApps = 1
*.gs[10].numApps = 1
*.gs[11].numApps = 1
*.gs[12].numApps = 1

# 记录仿真过程中产生的数据
*.app*.delay.result-recording-modes = +histogram,+statistics

[Dijkstra]
# 使用Dijkstra算法进行路径选择
**.bridging.interfaceRelay.selector.typename = "DijkstraRelayInterfaceSelector"

[DRA]
# 使用DRA算法进行路径选择
**.bridging.interfaceRelay.selector.typename = "DRARelayInterfaceSelector"



