[General]
network = Demo

description = ""

sim-time-limit = 500ms

*.numOfVN = 288
**.num_of_planes = 12
**.sta_per_plane = 24

#*.numOfVN = 30
#**.num_of_planes = 2
#**.sta_per_plane = 15

*.*.width = 2160
*.*.height = 1080

*.*.eth[*].bitrate = 1Gbps

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"

*.macForwardingTableConfigurator.typename = ""

**.udp.defaultMulticastLoop = false

*.*.hasOutgoingStreams = true
*.*.hasIncomingStreams = true

*.vn[*].hasEgressTrafficShaping = true

*.vn[*].eth[*].macLayer.queue.numTrafficClasses = 2
*.vn[*].eth[*].macLayer.queue.*[0].display-name = "TT"
*.vn[*].eth[*].macLayer.queue.*[1].display-name = "TT"
*.vn[*].eth[*].macLayer.queue.*[2].display-name = "BE"

*.vn[*].eth[*].macLayer.queue.typename = "Ieee8021qCyclicQueueingAndForwarding"
*.vn[*].eth[*].macLayer.queue.transmissionGate[0].durations = [50us, 50us]
*.vn[*].eth[*].macLayer.queue.transmissionGate[0].offset = 0us
*.vn[*].eth[*].macLayer.queue.transmissionGate[1].durations = [50us, 50us]
*.vn[*].eth[*].macLayer.queue.transmissionGate[1].offset = 50us
*.vn[*].eth[*].macLayer.queue.transmissionGate[2].alwaysOpen = true

*.vn[*].macTable.forwardingTable = [
        {address: "gs[1]", interface: "eth0", vlan: 1}, 
        {address: "gs[3]", interface: "eth0", vlan: 1}, 
        {address: "gs[4]", interface: "eth0", vlan: 1}, 
        {address: "gs[5]", interface: "eth0", vlan: 1}, 
        {address: "gs[6]", interface: "eth0", vlan: 1}, 
        {address: "gs[7]", interface: "eth0", vlan: 1}, 
        {address: "gs[8]", interface: "eth0", vlan: 1}, 
        {address: "gs[9]", interface: "eth0", vlan: 1},
        {address: "gs[11]", interface: "eth0", vlan: 1},  
        {address: "gs[12]", interface: "eth0", vlan: 1}, 
    ]


*.numOfGS = 13

*.gs[0].longitude = 116.20deg
*.gs[0].latitude = 39.55deg

*.gs[1].longitude = 25.45deg
*.gs[1].latitude = 40.25deg

*.gs[2].longitude = 51.30deg
*.gs[2].latitude = 35.44deg

*.gs[3].longitude = -60.00deg
*.gs[3].latitude = -36.30deg

*.gs[4].longitude = 149.08deg
*.gs[4].latitude = -35.15deg

*.gs[5].longitude = 55.45deg
*.gs[5].latitude = -4.62deg

*.gs[6].longitude = -21.85deg
*.gs[6].latitude = 64.09deg

*.gs[7].longitude = -6.56deg
*.gs[7].latitude = 62.05deg

*.gs[8].longitude = -77.02deg
*.gs[8].latitude = 39.91deg

*.gs[9].longitude = -75.42deg
*.gs[9].latitude = 45.27deg

*.gs[10].longitude = 1.14deg
*.gs[10].latitude = 30.01deg

*.gs[11].longitude = -99.10deg
*.gs[11].latitude = 19.20deg

*.gs[12].longitude = 16.42deg
*.gs[12].latitude = 24.41deg

*.gs[0].app[0].typename = "UdpSourceApp"
*.gs[0].app[0].display-name = "VLAN_0_Flow_1"
*.gs[0].app[0].io.destAddress = "gs[1]"
*.gs[0].app[0].io.destPort = 1004
*.gs[0].app[0].source.packetNameFormat = "%M->gs[1]:TT:gId1-%c"
*.gs[0].app[0].source.packetLength = 1250B - 28B
*.gs[0].app[0].source.productionInterval = 20us
*.gs[0].app[0].source.initialProductionOffset = 250ms
*.gs[1].app[0].typename = "UdpSinkApp"
*.gs[1].app[0].io.localPort = 1004

*.gs[0].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[1]:*" && udp.destPort == 1004), stream: "VLAN_0_Flow_1", sequenceNumbering: true}, 
	]
*.gs[0].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_1", pcp: 4, vlan: 1}, 
	]

*.gs[2].app[0].typename = "UdpSourceApp"
*.gs[2].app[0].display-name = "VLAN_0_Flow_2"
*.gs[2].app[0].io.destAddress = "gs[3]"
*.gs[2].app[0].io.destPort = 1005
*.gs[2].app[0].source.packetNameFormat = "%M->gs[3]:TT:gId1-%c"
*.gs[2].app[0].source.packetLength = 1250B - 28B
*.gs[2].app[0].source.productionInterval = 15us
*.gs[2].app[0].source.initialProductionOffset = 250ms
*.gs[3].app[0].typename = "UdpSinkApp"
*.gs[3].app[0].io.localPort = 1005

*.gs[2].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[3]:*" && udp.destPort == 1005), stream: "VLAN_0_Flow_2", sequenceNumbering: true}, 
	]
*.gs[2].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_2", pcp: 4, vlan: 1}, 
	]

*.gs[4].app[0].typename = "UdpSourceApp"
*.gs[4].app[0].display-name = "VLAN_0_Flow_3"
*.gs[4].app[0].io.destAddress = "gs[6]"
*.gs[4].app[0].io.destPort = 1006
*.gs[4].app[0].source.packetNameFormat = "%M->gs[6]:TT:gId1-%c"
*.gs[4].app[0].source.packetLength = 1250B - 28B
*.gs[4].app[0].source.productionInterval = 15us
*.gs[4].app[0].source.initialProductionOffset = 250ms
*.gs[6].app[0].typename = "UdpSinkApp"
*.gs[6].app[0].io.localPort = 1006

*.gs[4].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[6]:*" && udp.destPort == 1006), stream: "VLAN_0_Flow_3", sequenceNumbering: true}, 
	]
*.gs[4].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_3", pcp: 4, vlan: 1}, 
	]

*.gs[5].app[0].typename = "UdpSourceApp"
*.gs[5].app[0].display-name = "VLAN_0_Flow_4"
*.gs[5].app[0].io.destAddress = "gs[4]"
*.gs[5].app[0].io.destPort = 1007
*.gs[5].app[0].source.packetNameFormat = "%M->gs[4]:TT:gId1-%c"
*.gs[5].app[0].source.packetLength = 1250B - 28B
*.gs[5].app[0].source.productionInterval = 15us
*.gs[5].app[0].source.initialProductionOffset = 250ms
*.gs[4].app[1].typename = "UdpSinkApp"
*.gs[4].app[1].io.localPort = 1007

*.gs[5].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[4]:*" && udp.destPort == 1007), stream: "VLAN_0_Flow_4", sequenceNumbering: true}, 
	]
*.gs[5].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_4", pcp: 4, vlan: 1}, 
	]

*.gs[9].app[0].typename = "UdpSourceApp"
*.gs[9].app[0].display-name = "VLAN_0_Flow_5"
*.gs[9].app[0].io.destAddress = "gs[7]"
*.gs[9].app[0].io.destPort = 1008
*.gs[9].app[0].source.packetNameFormat = "%M->gs[7]:BE:gId1-%c"
*.gs[9].app[0].source.packetLength = 1250B - 28B
*.gs[9].app[0].source.productionInterval = 15us
*.gs[9].app[0].source.initialProductionOffset = 250ms
*.gs[7].app[0].typename = "UdpSinkApp"
*.gs[7].app[0].io.localPort = 1008

*.gs[9].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[7]:*" && udp.destPort == 1008), stream: "VLAN_0_Flow_5", sequenceNumbering: true}, 
	]
*.gs[9].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_5", pcp: 1, vlan: 1}, 
	]

*.gs[10].app[0].typename = "UdpSourceApp"
*.gs[10].app[0].display-name = "VLAN_0_Flow_6"
*.gs[10].app[0].io.destAddress = "gs[8]"
*.gs[10].app[0].io.destPort = 1009
*.gs[10].app[0].source.packetNameFormat = "%M->gs[8]:BE:gId1-%c"
*.gs[10].app[0].source.packetLength = 1250B - 28B
*.gs[10].app[0].source.productionInterval = 15us
*.gs[10].app[0].source.initialProductionOffset = 250ms
*.gs[8].app[0].typename = "UdpSinkApp"
*.gs[8].app[0].io.localPort = 1009

*.gs[10].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[8]:*" && udp.destPort == 1009), stream: "VLAN_0_Flow_6", sequenceNumbering: true}, 
	]
*.gs[10].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_6", pcp: 1, vlan: 1}, 
	]

*.gs[6].app[1].typename = "UdpSourceApp"
*.gs[6].app[1].display-name = "VLAN_0_Flow_7"
*.gs[6].app[1].io.destAddress = "gs[3]"
*.gs[6].app[1].io.destPort = 1010
*.gs[6].app[1].source.packetNameFormat = "%M->gs[3]:BE:gId1-%c"
*.gs[6].app[1].source.packetLength = 1250B - 28B
*.gs[6].app[1].source.productionInterval = 15us
*.gs[6].app[1].source.initialProductionOffset = 250ms
*.gs[3].app[1].typename = "UdpSinkApp"
*.gs[3].app[1].io.localPort = 1010

*.gs[6].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[3]:*" && udp.destPort == 1010), stream: "VLAN_0_Flow_7", sequenceNumbering: true}, 
	]
*.gs[6].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_7", pcp: 1, vlan: 1}, 
	]

#*.gs[11].app[0].typename = "UdpSourceApp"
#*.gs[11].app[0].display-name = "VLAN_0_Flow_8"
#*.gs[11].app[0].io.destAddress = "gs[5]"
#*.gs[11].app[0].io.destPort = 1005
#*.gs[11].app[0].source.packetNameFormat = "%M->gs[5]:BE:gId1-%c"
#*.gs[11].app[0].source.packetLength = 1250B - 28B
#*.gs[11].app[0].source.productionInterval = 15us
#*.gs[11].app[0].source.initialProductionOffset = 250ms
#*.gs[5].app[1].typename = "UdpSinkApp"
#*.gs[5].app[1].io.localPort = 1005
#
#*.gs[11].bridging.streamIdentifier.identifier.mapping = [
#		{packetFilter: expr(has(udp) && name =~ "*->gs[5]:*" && udp.destPort == 1005), stream: "VLAN_0_Flow_8", sequenceNumbering: true}, 
#	]
#*.gs[11].bridging.streamCoder.encoder.mapping = [
#		{stream: "VLAN_0_Flow_8", pcp: 1, vlan: 1}, 
#	]

*.gs[12].app[0].typename = "UdpSourceApp"
*.gs[12].app[0].display-name = "VLAN_0_Flow_9"
*.gs[12].app[0].io.destAddress = "gs[11]"
*.gs[12].app[0].io.destPort = 1010
*.gs[12].app[0].source.packetNameFormat = "%M->gs[11]:BE:gId1-%c"
*.gs[12].app[0].source.packetLength = 1250B - 28B
*.gs[12].app[0].source.productionInterval = 15us
*.gs[12].app[0].source.initialProductionOffset = 250ms
*.gs[11].app[0].typename = "UdpSinkApp"
*.gs[11].app[0].io.localPort = 1010

*.gs[12].bridging.streamIdentifier.identifier.mapping = [
		{packetFilter: expr(has(udp) && name =~ "*->gs[11]:*" && udp.destPort == 1010), stream: "VLAN_0_Flow_9", sequenceNumbering: true}, 
	]
*.gs[12].bridging.streamCoder.encoder.mapping = [
		{stream: "VLAN_0_Flow_9", pcp: 1, vlan: 1}, 
	]
#
#*.gs[7].app[1].typename = "UdpSourceApp"
#*.gs[7].app[1].display-name = "VLAN_0_Flow_10"
#*.gs[7].app[1].io.destAddress = "gs[12]"
#*.gs[7].app[1].io.destPort = 1003
#*.gs[7].app[1].source.packetNameFormat = "%M->gs[12]:BE:gId1-%c"
#*.gs[7].app[1].source.packetLength = 1250B - 28B
#*.gs[7].app[1].source.productionInterval = 15us
#*.gs[7].app[1].source.initialProductionOffset = 250ms
#*.gs[12].app[1].typename = "UdpSinkApp"
#*.gs[12].app[1].io.localPort = 1003
#
#*.gs[7].bridging.streamIdentifier.identifier.mapping = [
#		{packetFilter: expr(has(udp) && name =~ "*->gs[12]:*" && udp.destPort == 1003), stream: "VLAN_0_Flow_10", sequenceNumbering: true}, 
#	]
#*.gs[7].bridging.streamCoder.encoder.mapping = [
#		{stream: "VLAN_0_Flow_10", pcp: 1, vlan: 1}, 
#	]

*.gs[0].numApps = 1
*.gs[1].numApps = 1
*.gs[2].numApps = 1
*.gs[3].numApps = 2
*.gs[4].numApps = 2
*.gs[5].numApps = 1
*.gs[6].numApps = 2
*.gs[7].numApps = 1
*.gs[8].numApps = 1
*.gs[9].numApps = 1
*.gs[10].numApps = 1
*.gs[11].numApps = 1
*.gs[12].numApps = 1

*.app*.delay.result-recording-modes = +histogram,+statistics

[Dijkstra]
**.bridging.interfaceRelay.selector.typename = "DijkstraRelayInterfaceSelector"

[DRA]
**.bridging.interfaceRelay.selector.typename = "DRARelayInterfaceSelector"



